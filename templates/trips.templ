package templates

import (
    "github.com/skywall34/trip-tracker/internal/models"
    "github.com/skywall34/trip-tracker/internal/api"
    "encoding/json"
    "time"
    "fmt"
)

templ TripsPage() {
	<div class="flex-1 w-full max-w-6xl mx-auto px-4 py-8">
		<div class="text-center mb-8 mt-4">

            <!-- Title and subtitle -->
            <h1 class="text-5xl sm:text-4xl font-bold text-gray-800 mb-2">Saving Your Trips Is Easier Now</h1>

            <!-- Search Bar -->
            <div class="flex justify-center mt-4">
                <input
                    type="text"
                    placeholder="Search for a trip"
                    class="w-2/3 sm:w-1/2 rounded-l-full px-4 py-2 border border-gray-300 focus:outline-none"
                />
                <button class="rounded-r-full bg-green-500 text-white px-6 py-2 hover:bg-green-600 transition">
                    Search
                </button>
            </div>
        </div>

        <div class="relative w-full max-w-sm mx-auto mb-6">
            <!-- Animated slider -->
            <div id="tab-slider" class="absolute top-0 left-0 w-1/2 h-full bg-gray-200 rounded-full transition-all duration-300 ease-in-out z-0"></div>
        
            <!-- Buttons go on top -->
            <div class="flex border rounded-full overflow-hidden relative z-10">
                <button 
                    id="tab-upcoming" 
                    hx-get="/trips?past=false" 
                    hx-target="#trips-list" 
                    hx-trigger="load, click"
                    class="w-1/2 py-2 font-semibold transition text-gray-700 focus:outline-none relative z-20"
                >
                    Upcoming
                </button>
                <button 
                    id="tab-past" 
                    hx-get="/trips?past=true" 
                    hx-target="#trips-list"
                    class="w-1/2 py-2 font-semibold transition text-gray-700 focus:outline-none relative z-20"
                >
                    Past
                </button>
                <button id="add-trip-btn" class="p-2 bg-gray-100 rounded-full hover:bg-gray-200 transition ml-2">
                    <a href="/createtripform"><img src="/static/images/add-circle-svgrepo-com.svg" alt="Add" class="w-6 h-6"></a>
                </button>
            </div>
        </div>
			
        <!-- Trip Cards List TODO: Filter only by user and date range -->
        <div id="trips-list">
            <!-- This will be populated by HTMX, calling RenderTrips or RenderPastTrips -->
        </div>   
	</div>
}

templ renderFlightSegment(trip models.Trip) {
    <div class="bg-white text-gray-700 p-6 rounded-lg w-full text-center shadow-lg relative">
        <!-- Icon in Top-Right -->
        <button 
            class="text-gray-500 hover:text-blue-600 transition"
            hx-get={"/edittripform?id=" + fmt.Sprint(trip.ID)}
            hx-target={"#trip-element-" + fmt.Sprint(trip.ID)}
            hx-swap="outerHTML"
        >
            <img src="/static/images/edit-trip.png" alt="Edit" class="w-5 h-5">
        </button>
        <button 
            class="text-gray-500 hover:text-red-600 transition" 
            hx-delete={"/trips?id=" + fmt.Sprint(trip.ID)} 
            hx-target={"#trip-element-" + fmt.Sprint(trip.ID)} 
            hx-swap="outerHTML"
        >
            <img src="/static/images/trash-svgrepo-com.svg" alt="Delete" class="w-6 h-6">
        </button>
        <div class="flex justify-between items-center">
            <!-- Departure Time stored in UTC-->
            <div class="text-center w-full">
                <span class="block text-lg font-bold text-green-700">{trip.Departure}</span>
                if trip.DepartureTimezone != nil {
                    <span class="block text-xl font-semibold time-convert" 
                        data-utc={time.Unix(int64(trip.DepartureTime), 0).UTC().Format(time.RFC3339)} 
                        data-tz={*trip.DepartureTimezone}>
                        Loading...
                    </span>
                } else {
                    <span class="block text-xl font-semibold">N/A</span>
                }
            </div>
            <span class="text-3xl font-bold text-green-600">â†’</span>
            <div class="text-center w-full">
                <span class="block text-lg font-bold text-green-700">{trip.Arrival}</span>
                if trip.ArrivalTimezone != nil {
                    <span class="block text-xl font-semibold time-convert" 
                        data-utc={time.Unix(int64(trip.ArrivalTime), 0).UTC().Format(time.RFC3339)} 
                        data-tz={*trip.ArrivalTimezone}>
                        Loading...
                    </span>
                } else {
                    <span class="block text-xl font-semibold">N/A</span>
                }
            </div>
        </div>
        <div class="grid grid-cols-4 text-sm text-gray-400 mt-4 text-center">
            <span class="col-span-1">Flight</span>
            <span class="col-span-1">Reservation</span>
            <span class="col-span-1">Terminal</span>
            <span class="col-span-1">Gate</span>
        </div>
        <div class="grid grid-cols-4 text-sm font-semibold mt-1 text-center text-gray-700">
            <span class="col-span-1">{trip.FlightNumber}</span>
            if trip.Reservation != nil {
                <span class="col-span-1">{ *trip.Reservation }</span>
            } else {
                <span class="col-span-1">N/A</span>
            }
            if trip.Terminal != nil {
                <span class="col-span-1">{ *trip.Terminal }</span>
            } else {
                <span class="col-span-1">N/A</span>
            }
            if trip.Gate != nil {
                <span class="col-span-1">{ *trip.Gate }</span>
            } else {
                <span class="col-span-1">N/A</span>
            }
        </div>
    </div>
}

// New template for editing a trip
templ EditTripForm(trip models.Trip) {
    <div class="relative border-2 border-blue-300 rounded-xl shadow-lg bg-blue-50" id={"trip-element-" + fmt.Sprint(trip.ID)}>
        <div class="bg-blue-100 text-blue-800 text-center py-2 rounded-t-xl font-semibold">
            Editing Trip
        </div>
        
        <div class="p-6">
            <form 
                hx-put={"/trips?id=" + fmt.Sprint(trip.ID)}
                hx-target={"#trip-element-" + fmt.Sprint(trip.ID)}
                hx-swap="outerHTML"
            >
                <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    {{ inputStyle := "w-full border border-gray-200 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:outline-none" }}
                    {{ 
                        reservationValue := "N/A"
                        if trip.Reservation != nil || *trip.Reservation == "" {
                            reservationValue = *trip.Reservation
                        }
                        terminalValue := "N/A"
                        if trip.Terminal != nil || *trip.Terminal == "" {
                            terminalValue = *trip.Terminal
                        }
                        gateValue := "N/A"
                        if trip.Gate != nil || *trip.Gate == "" {
                            gateValue = *trip.Gate
                        }
                    
                    }}
                    <div>
                        <label class="block text-sm font-semibold text-gray-600 mb-1">Departure</label>
                        <input type="text" name="departure" value={trip.Departure} class={inputStyle} required>
                    </div>
                    <div>
                        <label class="block text-sm font-semibold text-gray-600 mb-1">Arrival</label>
                        <input type="text" name="arrival" value={trip.Arrival} class={inputStyle} required>
                    </div>
                    <div>
                        <label class="block text-sm font-semibold text-gray-600 mb-1">Departure Time</label>
                        <input 
                            type="datetime-local" 
                            name="departuretime" 
                            value={time.Unix(int64(trip.DepartureTime), 0).Format("2006-01-02T15:04")}
                            class={inputStyle} 
                            required
                        >
                    </div>
                    <div>
                        <label class="block text-sm font-semibold text-gray-600 mb-1">Arrival Time</label>
                        <input 
                            type="datetime-local" 
                            name="arrivaltime" 
                            value={time.Unix(int64(trip.ArrivalTime), 0).Format("2006-01-02T15:04")}
                            class={inputStyle} 
                            required
                        >
                    </div>
                    <div>
                        <label class="block text-sm font-semibold text-gray-600 mb-1">Airline</label>
                        <input type="text" name="airline" value={trip.Airline} class={inputStyle} required>
                    </div>
                    <div>
                        <label class="block text-sm font-semibold text-gray-600 mb-1">Flight Number</label>
                        <input type="text" name="flightnumber" value={trip.FlightNumber} class={inputStyle} required>
                    </div>
                    <div>
                        <label class="block text-sm font-semibold text-gray-600 mb-1">Reservation</label>
                        <input 
                            type="text" 
                            name="reservation" 
                            value={reservationValue}
                            class={inputStyle}
                        >
                    </div>
                    <div>
                        <label class="block text-sm font-semibold text-gray-600 mb-1">Terminal</label>
                        <input 
                            type="text" 
                            name="terminal" 
                            value={terminalValue}
                            class={inputStyle}
                        >
                    </div>
                    <div>
                        <label class="block text-sm font-semibold text-gray-600 mb-1">Gate</label>
                        <input 
                            type="text" 
                            name="gate" 
                            value={gateValue}
                            class={inputStyle}
                        >
                    </div>
                </div>

                <input type="hidden" name="timezone" id="timezone">

                <div class="mt-6 flex space-x-4">
                    <button 
                        type="submit" 
                        class="flex-1 bg-blue-500 text-white py-2 rounded-lg font-semibold hover:bg-blue-600 transition"
                    >
                        Save Changes
                    </button>
                    <button 
                        type="button"
                        class="flex-1 bg-gray-100 text-gray-700 py-2 rounded-lg font-semibold hover:bg-gray-200 transition"
                    >
                        <a 
                            href="/trips"
                        >
                            Cancel
                        </a>
                    </button>
                </div>
            </form>
        </div>
    </div>
}

templ RenderTrips(trips []models.Trip, connectingTrips []models.ConnectingTrip) {

    <!-- Trip Filters TODO: Show Date Filter -->
    <div class="text-center text-lg font-semibold mt-4 text-green-700">
        {time.Now().Format("2 Jan 2006")} - {time.Now().AddDate(1, 0, 0).Format("2 Jan 2006")}
    </div>
      

    <div class="space-y-6">
        for _, trip := range trips {
            <div class="relative" id={"trip-element-" + fmt.Sprint(trip.ID)}>
                <!-- Flight Card TODO: Reservation, Terminal, Gate -->
                <div class="flex justify-between text-gray-500 text-sm my-2 font-bold">
                    <span></span>
                    <span>{
                        fmt.Sprintf(
                            "%dh %dm", 
                            int((time.Duration(int64(trip.ArrivalTime)-int64(trip.DepartureTime))*time.Second).Hours()), 
                            int((time.Duration(int64(trip.ArrivalTime)-int64(trip.DepartureTime))*time.Second).Minutes()) % 60)
                        }
                    </span>
                </div>
                
                @renderFlightSegment(trip)
            
                <!-- Check In Section TODO: Status Backend -->
                <div class="bg-[#DBF3F8] text-gray-700 p-6 rounded-lg w-full text-center shadow mt-1">
                    <div class="flex justify-between">
                        <div class="text-center w-full">
                            <span class="block text-sm font-bold">Status</span>
                            <span class="block text-sm font-bold">On Time</span>
                        </div>
                        <div class="text-center w-full">
                            <span class="block text-sm font-bold">Check In At</span>
                            if trip.DepartureTimezone != nil {
                                <span class="block text-sm font-bold time-convert" 
                                    data-utc={time.Unix(int64(trip.DepartureTime) - (24 * 60 * 60), 0).UTC().Format(time.RFC3339)}
                                    data-tz={*trip.DepartureTimezone}>
                                    Loading...
                                </span>
                            } else {
                                <span class="block text-sm font-bold">N/A</span>
                            }
                        </div>
                    </div>
                    <div class="w-full bg-gray-300 h-2 rounded-full overflow-hidden mt-2">
                        <div class="bg-green-500 h-full w-3/5"></div>
                    </div>
                </div>

                if time.Now().Unix() > int64(trip.DepartureTime) - (24 * 60 * 60) && time.Now().Unix() < int64(trip.DepartureTime) - (90 * 60) {
                    <!-- Check-In Button Only If Within the time frame (24hrs before and up to 90 minutes before departure) -->
                    <button class="w-full bg-green-500 text-white py-2 mt-2 rounded-lg font-semibold hover:bg-green-600 transition">
                        Check In
                    </button>
                }
            </div>
        }
    </div>

    <!-- Connecting Trips -->
    <div class="space-y-6 mt-10">
        for _, conn := range connectingTrips {
            <div class="relative border border-green-300 rounded-xl shadow-lg">
                <!-- Label -->
                <div class="text-sm text-center text-green-700 font-semibold py-2 bg-green-50 rounded-t-xl">
                    Connecting Flight via {conn.FromTrip.Arrival}
                </div>

                <!-- First Leg -->
                <div class="p-4 border-b border-dashed border-green-200">
                    @renderFlightSegment(conn.FromTrip)
                </div>

                <!-- Layover Info -->
                <div class="text-xs text-center py-2 text-gray-500 font-medium italic">
                    Layover: {
                        fmt.Sprintf(
                            "%dh %dm",
                            int((time.Duration(int64(conn.ToTrip.DepartureTime)-int64(conn.FromTrip.ArrivalTime)) * time.Second).Hours()),
                            int((time.Duration(int64(conn.ToTrip.DepartureTime)-int64(conn.FromTrip.ArrivalTime)) * time.Second).Minutes()) % 60,
                        )
                    } in {conn.FromTrip.Arrival}
                </div>

                <!-- Second Leg -->
                <div class="p-4">
                    @renderFlightSegment(conn.ToTrip)
                </div>
            </div>
        }
    </div>
}

templ RenderPastTrips(trips []models.Trip, connectingTrips []models.ConnectingTrip) {

    <div class="space-y-6">
        for _, trip := range trips {
            <div class="relative" id={"trip-element-" + fmt.Sprint(trip.ID)}>
                <div class="flex justify-between text-gray-500 text-sm my-2 font-bold">
                    <span></span>
                    <span>{
                        fmt.Sprintf(
                            "%dh %dm", 
                            int((time.Duration(int64(trip.ArrivalTime)-int64(trip.DepartureTime))*time.Second).Hours()), 
                            int((time.Duration(int64(trip.ArrivalTime)-int64(trip.DepartureTime))*time.Second).Minutes()) % 60)
                        }
                    </span>
                </div>
                @renderFlightSegment(trip)
            </div>
        }
    </div>

    <!-- Connecting Trips -->
    <div class="space-y-6 mt-10">
        for _, conn := range connectingTrips {
            <div class="relative border border-green-300 rounded-xl shadow-lg">
                <!-- Label -->
                <div class="text-sm text-center text-green-700 font-semibold py-2 bg-green-50 rounded-t-xl">
                    Connecting Flight via {conn.FromTrip.Arrival}
                </div>

                <!-- First Leg -->
                <div class="p-4 border-b border-dashed border-green-200">
                    @renderFlightSegment(conn.FromTrip)
                </div>

                <!-- Layover Info -->
                <div class="text-xs text-center py-2 text-gray-500 font-medium italic">
                    Layover: {
                        fmt.Sprintf(
                            "%dh %dm",
                            int((time.Duration(int64(conn.ToTrip.DepartureTime)-int64(conn.FromTrip.ArrivalTime)) * time.Second).Hours()),
                            int((time.Duration(int64(conn.ToTrip.DepartureTime)-int64(conn.FromTrip.ArrivalTime)) * time.Second).Minutes()) % 60,
                        )
                    } in {conn.FromTrip.Arrival}
                </div>

                <!-- Second Leg -->
                <div class="p-4">
                    @renderFlightSegment(conn.ToTrip)
                </div>
            </div>
        }
    </div>
}

templ CreateTripPage() {
    <div class="flex-1 w-full max-w-5xl mx-auto px-6 py-12 bg-[#F4FAF8] rounded-2xl shadow-lg">
        <div class="text-center">
            <h1 class="text-2xl sm:text-3xl font-bold text-[#36B37E] mb-4">
                Search for Your Flight
            </h1>

            <!-- Search Bar -->
            <form 
                hx-get="/api/flights" 
                hx-target="#results" 
                class="flex flex-col sm:flex-row justify-center items-center gap-3 mt-4 w-full sm:w-3/4 mx-auto"
            >
                <input
                    type="text"
                    name="flight_iata"
                    placeholder="Flight IATA code (e.g. UA100)"
                    class="flex-grow rounded-2xl px-4 py-3 border border-gray-200 shadow-sm focus:ring-2 focus:ring-[#36B37E] focus:outline-none w-full"
                />
                <button 
                    type="submit"
                    class="bg-[#36B37E] text-white px-6 py-3 rounded-2xl hover:bg-green-600 transition"
                >
                    Search
                </button>
            </form>

            <button 
                id="add-trip-btn" 
                class="mt-6 px-4 py-2 bg-white text-[#36B37E] font-medium rounded-2xl shadow hover:bg-gray-100 transition"
            >
                Manually Add Trip
            </button>

            <div id="create-trip-form" class="hidden mt-8">
                @CreateTripForm()
            </div>

            <div id="results" class="mt-8"></div>
        </div>
    </div>
}

templ TripForm(flights api.FlightsAPIResponse) {
    for _, flight := range flights.Data {
        {{
            str := func(ptr *string) string {
                if ptr != nil {
                    return *ptr
                }
                return ""
            }

            vals := map[string]string{
                "departure":     flight.Departure.IATA,
                "arrival":       flight.Arrival.IATA,
                "airline":       flight.Airline.Name,
                "flightnumber":  flight.FlightInfo.Number,
                "reservation":   "",
                "terminal":      str(flight.Departure.Terminal),
                "gate":          str(flight.Departure.Gate),
                "timezone":      flight.Departure.Timezone,
            }

            hxValsJSONBytes, err := json.Marshal(vals)
            if err != nil {
                panic("failed to marshal hx-vals JSON: " + err.Error())
            }
            hxValsJSON := string(hxValsJSONBytes)

            inputStyle := "w-full border border-gray-200 rounded-2xl px-4 py-3 shadow-sm focus:ring-2 focus:ring-[#36B37E] focus:outline-none"
        }}

        <div class="bg-white border border-gray-100 shadow-lg rounded-2xl p-6 sm:p-8 my-6">
            <h3 class="text-xl font-semibold text-gray-800 mb-4">
                {flight.Departure.IATA} â†’ {flight.Arrival.IATA} &nbsp; Â· &nbsp; {flight.Airline.Name} {flight.FlightInfo.Number}
            </h3>

            <form hx-post="/trips" hx-vals={hxValsJSON} hx-swap="none">
                <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-semibold text-gray-600 mb-1">Departure Time</label>
                        <input
                            type="datetime-local"
                            name="departuretime"
                            required
                            class={inputStyle}
                        />
                    </div>
                    <div>
                        <label class="block text-sm font-semibold text-gray-600 mb-1">Arrival Time</label>
                        <input
                            type="datetime-local"
                            name="arrivaltime"
                            required
                            class={inputStyle}
                        />
                    </div>
                </div>

                <div class="mt-6">
                    <button
                        type="submit"
                        class="bg-[#36B37E] text-white px-6 py-3 rounded-2xl font-semibold hover:bg-green-600 transition w-full sm:w-auto"
                    >
                        Add to My Flights
                    </button>
                </div>
            </form>
        </div>
    }
}


templ CreateTripForm() {
    <div id="create-trip" class="bg-white p-6 sm:p-8 rounded-2xl shadow-lg border border-gray-100">
        <h2 class="text-2xl font-semibold text-gray-800 mb-6">Add a New Trip</h2>

        <form hx-post="/trips" hx-target="#trips-list" hx-swap="beforebegin">
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                {{/* Reusable input styles */}}
                {{ inputStyle := "w-full border border-gray-200 rounded-2xl px-4 py-3 shadow-sm focus:ring-2 focus:ring-[#36B37E] focus:outline-none" }}

                <div>
                    <label class="block text-sm font-semibold text-gray-600 mb-1">Departure</label>
                    <input type="text" name="departure" class={inputStyle} placeholder="Enter departure location" required>
                </div>
                <div>
                    <label class="block text-sm font-semibold text-gray-600 mb-1">Arrival</label>
                    <input type="text" name="arrival" class={inputStyle} placeholder="Enter arrival location" required>
                </div>
                <div>
                    <label class="block text-sm font-semibold text-gray-600 mb-1">Departure Time</label>
                    <input type="datetime-local" name="departuretime" class={inputStyle} required>
                </div>
                <div>
                    <label class="block text-sm font-semibold text-gray-600 mb-1">Arrival Time</label>
                    <input type="datetime-local" name="arrivaltime" class={inputStyle} required>
                </div>
                <div>
                    <label class="block text-sm font-semibold text-gray-600 mb-1">Airline</label>
                    <input type="text" name="airline" class={inputStyle} placeholder="Enter airline name" required>
                </div>
                <div>
                    <label class="block text-sm font-semibold text-gray-600 mb-1">Flight Number</label>
                    <input type="text" name="flightnumber" class={inputStyle} placeholder="Enter flight number" required>
                </div>
                <div>
                    <label class="block text-sm font-semibold text-gray-600 mb-1">Reservation</label>
                    <input type="text" name="reservation" class={inputStyle} placeholder="Enter reservation code">
                </div>
                <div>
                    <label class="block text-sm font-semibold text-gray-600 mb-1">Terminal</label>
                    <input type="text" name="terminal" class={inputStyle} placeholder="Enter terminal">
                </div>
                <div>
                    <label class="block text-sm font-semibold text-gray-600 mb-1">Gate</label>
                    <input type="text" name="gate" class={inputStyle} placeholder="Enter gate">
                </div>
            </div>

            <input type="hidden" name="timezone" id="timezone">

            <div class="mt-6 grid grid-cols-1 sm:grid-cols-2 gap-4">
                <button type="submit" class="w-full bg-[#36B37E] text-white py-3 rounded-2xl font-semibold hover:bg-green-600 transition">
                    Submit Trip
                </button>
                <button type="button" id="close-trip-form" class="w-full bg-gray-100 text-gray-700 py-3 rounded-2xl font-semibold hover:bg-gray-200 transition">
                    Cancel
                </button>
            </div>
        </form>
    </div>
}
