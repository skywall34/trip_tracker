package templates

import (
    "github.com/skywall34/trip-tracker/internal/models"
    "github.com/skywall34/trip-tracker/internal/api"
    "encoding/json"
    "time"
    "fmt"
)

templ TripsPage() {
	<div class="flex-1 w-full max-w-6xl mx-auto px-4 py-8">
		<div class="text-center mb-8 mt-4">

            <!-- Title and subtitle -->
            <h1 class="text-5xl sm:text-4xl font-bold text-gray-800 mb-2">Saving Your Trips Is Easier Now</h1>

            <!-- Search Bar -->
            <div class="flex justify-center mt-4">
                <input
                    type="text"
                    placeholder="Search for a trip"
                    class="w-2/3 sm:w-1/2 rounded-l-full px-4 py-2 border border-gray-300 focus:outline-none"
                />
                <button class="rounded-r-full bg-green-500 text-white px-6 py-2 hover:bg-green-600 transition">
                    Search
                </button>
            </div>
        </div>

        <!-- Tabs -->
        <div class="flex border rounded-full overflow-hidden w-full max-w-sm mx-auto mb-6">
            <button hx-get="/trips?past=false" hx-target="#trips-list" hx-trigger="load, click" class="w-1/2 bg-white text-gray-700 py-2 font-semibold transition hover:bg-gray-100 focus:outline-none">
                Upcoming
            </button>
            <button hx-get="/trips?past=true" hx-target="#trips-list" class="w-1/2 bg-gray-200 text-gray-600 py-2 font-semibold transition hover:bg-gray-300 focus:outline-none">
                Past
            </button>
            <button id="add-trip-btn" class="p-2 bg-gray-200 rounded-full hover:bg-gray-300 transition">
                <img src="/static/images/add-circle-svgrepo-com.svg" alt="Add" class="w-6 h-6">
            </button>

        </div>

        <!-- Hidden Create Trip Form -->
        <div id="create-trip-form" class="hidden fixed inset-0 flex items-center justify-center">
            <div class="bg-white p-6 rounded-lg shadow-md w-96">
                @CreateTripForm()
            </div>
        </div>
			
        <!-- Trip Cards List TODO: Filter only by user and date range -->
        <div id="trips-list">
            <!-- This will be populated by HTMX, calling RenderTrips or RenderPastTrips -->
        </div>   
	</div>
}

templ RenderTrips(trips []models.Trip) {

    <!-- Trip Filters TODO: Show Date Filter -->
    <div class="text-center text-lg font-semibold mt-4 text-green-700">
        {time.Now().Format("2 Jan 2006")} - {time.Now().AddDate(1, 0, 0).Format("2 Jan 2006")}
    </div>
      

    <div class="space-y-6">
        for _, trip := range trips {
            <div class="relative" id={"trip-element-" + fmt.Sprint(trip.ID)}>
                <!-- Flight Card TODO: Reservation, Terminal, Gate -->
                <div class="flex justify-between text-gray-500 text-sm my-2 font-bold">
                    <span></span>
                    <span>{
                        fmt.Sprintf(
                            "%dh %dm", 
                            int((time.Duration(int64(trip.ArrivalTime)-int64(trip.DepartureTime))*time.Second).Hours()), 
                            int((time.Duration(int64(trip.ArrivalTime)-int64(trip.DepartureTime))*time.Second).Minutes()) % 60)
                        }
                    </span>
                </div>
                <div class="bg-white text-gray-700 p-6 rounded-lg w-full text-center shadow-lg relative">
                    <!-- Icon in Top-Right -->
                    <button class="absolute top-3 right-3 text-gray-500 hover:text-gray-700" hx-delete={"/trips?id=" + fmt.Sprint(trip.ID)} hx-target={"#trip-element-" + fmt.Sprint(trip.ID)} hx-swap="outerHTML">
                        <img src="/static/images/trash-svgrepo-com.svg" alt="Delete" class="w-6 h-6">
                    </button>
                    <div class="flex justify-between items-center">
                        <!-- Departure Time stored in UTC-->
                        <div class="text-center w-full">
                            <span class="block text-lg font-bold text-green-700"> {trip.Departure} </span>
                            <span class="block text-xl font-semibold time-convert" data-utc={time.Unix(int64(trip.DepartureTime), 0).UTC().Format(time.RFC3339)}>
                                Loading...
                            </span>
                        </div>
                        <span class="text-3xl font-bold text-green-600">→</span>
                        <div class="text-center w-full">
                            <span class="block text-lg font-bold text-green-700">{trip.Arrival}</span>
                            <span class="block text-xl font-semibold time-convert" data-utc={time.Unix(int64(trip.ArrivalTime), 0).UTC().Format(time.RFC3339)}>
                                Loading...
                            </span>
                        </div>
                    </div>
                    <div class="grid grid-cols-4 text-sm text-gray-400 mt-4 text-center">
                        <span class="col-span-1">Flight</span>
                        <span class="col-span-1">Reservation</span>
                        <span class="col-span-1">Terminal</span>
                        <span class="col-span-1">Gate</span>
                    </div>
                    <div class="grid grid-cols-4 text-sm font-semibold mt-1 text-center text-gray-700">
                        <span class="col-span-1">{trip.FlightNumber}</span>
                        <span class="col-span-1">{trip.Reservation}</span>
                        <span class="col-span-1">{trip.Terminal}</span>
                        <span class="col-span-1">{trip.Gate}</span>
                    </div>
                </div>
            
                <!-- Check-In Section TODO: Status Backend -->
                <div class="bg-[#DBF3F8] text-gray-700 p-6 rounded-lg w-full text-center shadow mt-1">
                    <div class="flex justify-between">
                        <div class="text-center w-full">
                            <span class="block text-sm font-bold">Status</span>
                            <span class="block text-sm font-bold">On Time</span>
                        </div>
                        <div class="text-center w-full">
                            <span class="block text-sm font-bold">Check-In At</span>
                            <span class="block text-sm font-bold time-convert" data-utc={time.Unix(int64(trip.DepartureTime) - (24 * 60 * 60), 0).UTC().Format(time.RFC3339)}>
                                Loading...
                            </span>
                        </div>
                    </div>
                    <div class="w-full bg-gray-300 h-2 rounded-full overflow-hidden mt-2">
                        <div class="bg-green-500 h-full w-3/5"></div>
                    </div>
                </div>

                if time.Now().Unix() > int64(trip.DepartureTime) - (24 * 60 * 60) && time.Now().Unix() < int64(trip.DepartureTime) - (90 * 60) {
                    <!-- Check-In Button Only If Within the time frame (24hrs before and up to 90 minutes before departure) -->
                    <button class="w-full bg-green-500 text-white py-2 mt-2 rounded-lg font-semibold hover:bg-green-600 transition">
                        Check In
                    </button>
                }
            </div>
        }
    </div>
}

templ RenderPastTrips(trips []models.Trip) {

    <div class="space-y-6">
        for _, trip := range trips {
            <div class="relative" id={"trip-element-" + fmt.Sprint(trip.ID)}>
                <div class="flex justify-between text-gray-500 text-sm my-2 font-bold">
                    <span></span>
                    <span>{
                        fmt.Sprintf(
                            "%dh %dm", 
                            int((time.Duration(int64(trip.ArrivalTime)-int64(trip.DepartureTime))*time.Second).Hours()), 
                            int((time.Duration(int64(trip.ArrivalTime)-int64(trip.DepartureTime))*time.Second).Minutes()) % 60)
                        }
                    </span>
                </div>
                <div class="bg-white text-gray-700 p-6 rounded-lg w-full text-center shadow-lg relative">
                    <!-- Icon in Top-Right -->
                    <button class="absolute top-3 right-3 text-gray-500 hover:text-gray-700" hx-delete={"/trips?id=" + fmt.Sprint(trip.ID)} hx-target={"#trip-element-" + fmt.Sprint(trip.ID)} hx-swap="outerHTML">
                        <img src="/static/images/trash-svgrepo-com.svg" alt="Delete" class="w-6 h-6">
                    </button>
                    <div class="flex justify-between items-center">
                        <div class="text-center w-full">
                            <span class="block text-lg font-bold text-green-700"> {trip.Departure} </span>
                            <span class="block text-xl font-semibold time-convert" data-utc={time.Unix(int64(trip.DepartureTime), 0).UTC().Format(time.RFC3339)}>
                                Loading...
                            </span>
                        </div>
                        <span class="text-3xl font-bold text-green-600">→</span>
                        <div class="text-center w-full">
                            <span class="block text-lg font-bold text-green-700">{trip.Arrival}</span>
                            <span class="block text-xl font-semibold time-convert" data-utc={time.Unix(int64(trip.ArrivalTime), 0).UTC().Format(time.RFC3339)}>
                                Loading...
                            </span>
                        </div>
                    </div>
                    <div class="grid grid-cols-4 text-sm text-gray-400 mt-4 text-center">
                        <span class="col-span-1">Flight</span>
                        <span class="col-span-1">Reservation</span>
                        <span class="col-span-1">Terminal</span>
                        <span class="col-span-1">Gate</span>
                    </div>
                    <div class="grid grid-cols-4 text-sm font-semibold mt-1 text-center text-gray-700">
                        <span class="col-span-1">{trip.FlightNumber}</span>
                        <span class="col-span-1">{trip.Reservation}</span>
                        <span class="col-span-1">{trip.Terminal}</span>
                        <span class="col-span-1">{trip.Gate}</span>
                    </div>
                </div>
            </div>
        }
    </div>
}

templ CreateTripPage() {
    <div class="flex-1 w-full max-w-6xl mx-auto px-4 py-8">
		<div class="text-center mb-8 mt-4">
            <!-- Search Bar -->
            <div class="flex justify-center mt-4">
                <form 
                    hx-get="/api/flights" 
                    hx-target="#results" 
                    class="flex w-2/3 sm:w-1/2"
                >
                    <input
                        type="text"
                        name="flight_iata"
                        placeholder="Search for a flight"
                        class="flex-grow rounded-l-full px-4 py-2 border border-gray-300 focus:outline-none"
                    />
                    <button 
                        type="submit"
                        class="rounded-r-full bg-green-500 text-white px-6 py-2 hover:bg-green-600 transition"
                    >
                        Search
                    </button>
                </form>
            </div>

            <!-- Somewhere on the page -->
            <div id="results"></div>
        </div>
    </div>
}

templ TripForm(flights api.FlightsAPIResponse) {
    for _, flight := range flights.Data {
        {{
            // Helper to safely dereference *string
            str := func(ptr *string) string {
                if ptr != nil {
                    return *ptr
                }
                return ""
            }

            vals := map[string]string{
                "departure":     flight.Departure.IATA,
                "arrival":       flight.Arrival.IATA,
                "departuretime": flight.Departure.Scheduled.Format("2006-01-02T15:04"),
                "arrivaltime":   flight.Arrival.Scheduled.Format("2006-01-02T15:04"),
                "airline":       flight.Airline.Name,
                "flightnumber":  flight.FlightInfo.Number,
                "reservation":   "",
                "terminal":      str(flight.Departure.Terminal),
                "gate":          str(flight.Departure.Gate),
                "timezone":      flight.Departure.Timezone,
            }

            hxValsJSONBytes, err := json.Marshal(vals)
            if err != nil {
                panic("failed to marshal hx-vals JSON: " + err.Error())
            }
            hxValsJSON := string(hxValsJSONBytes)
        }}

        <div class="bg-white shadow-md rounded p-4 flex justify-between items-center">
            <div>
                <h3 class="text-xl font-semibold">Flight {flight.FlightInfo.IATA}</h3>
                <p class="text-gray-600">{flight.Departure.Airport} → {flight.Arrival.Airport}, {flight.Departure.Scheduled.Format("Jan 2, 2006 3:04 PM")}</p>
            </div>
            <button 
                hx-post="/trips"
                hx-vals={hxValsJSON}
                hx-swap="none"
                class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 transition"
            >
                Add to My Flights
            </button>
        </div>
    }
}


templ CreateTripForm() {
    <div id="create-trip" class="bg-white p-6 rounded-lg shadow-md">
        <h2 class="text-xl font-bold text-gray-800 mb-4">Add a New Trip</h2>
        
        <form hx-post="/trips" hx-target="#trips-list" hx-swap="beforebegin">
            <div class="grid grid-cols-2 gap-4">
                <div>
                    <label class="block text-sm font-semibold text-gray-600">Departure</label>
                    <input type="text" name="departure" class="w-full border rounded-lg px-4 py-2 focus:outline-none" placeholder="Enter departure location" required>
                </div>
                <div>
                    <label class="block text-sm font-semibold text-gray-600">Arrival</label>
                    <input type="text" name="arrival" class="w-full border rounded-lg px-4 py-2 focus:outline-none" placeholder="Enter arrival location" required>
                </div>
                <div>
                    <label class="block text-sm font-semibold text-gray-600">Departure Time</label>
                    <input type="datetime-local" name="departuretime" class="w-full border rounded-lg px-4 py-2 focus:outline-none" required>
                </div>
                <div>
                    <label class="block text-sm font-semibold text-gray-600">Arrival Time</label>
                    <input type="datetime-local" name="arrivaltime" class="w-full border rounded-lg px-4 py-2 focus:outline-none" required>
                </div>
                <div>
                    <label class="block text-sm font-semibold text-gray-600">Airline</label>
                    <input type="text" name="airline" class="w-full border rounded-lg px-4 py-2 focus:outline-none" placeholder="Enter airline name" required>
                </div>
                <div>
                    <label class="block text-sm font-semibold text-gray-600">Flight Number</label>
                    <input type="text" name="flightnumber" class="w-full border rounded-lg px-4 py-2 focus:outline-none" placeholder="Enter flight number" required>
                </div>
                <div>
                    <label class="block text-sm font-semibold text-gray-600">Reservation</label>
                    <input type="text" name="reservation" class="w-full border rounded-lg px-4 py-2 focus:outline-none" placeholder="Enter reservation code">
                </div>
                <div>
                    <label class="block text-sm font-semibold text-gray-600">Terminal</label>
                    <input type="text" name="terminal" class="w-full border rounded-lg px-4 py-2 focus:outline-none" placeholder="Enter terminal">
                </div>
                <div>
                    <label class="block text-sm font-semibold text-gray-600">Gate</label>
                    <input type="text" name="gate" class="w-full border rounded-lg px-4 py-2 focus:outline-none" placeholder="Enter gate">
                </div>
            </div>

            <input type="hidden" name="timezone" id="timezone"> <!-- Hidden field for timezone -->

            <button type="submit" class="mt-4 w-full bg-green-500 text-white py-2 rounded-lg font-semibold hover:bg-green-600 transition">
                Submit Trip
            </button>
            <button type="button" id="close-trip-form" class="mt-4 w-full bg-gray-300 text-white py-2 rounded-lg font-semibold hover:bg-gray-600 transition">
                Cancel
            </button>
        </form>
    </div>
}
