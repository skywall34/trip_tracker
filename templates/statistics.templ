package templates

import (
    "github.com/skywall34/trip-tracker/internal/models"
    "strconv"
)

// By default aggregations will be by month
templ Statistics(firstName string, tsAggregation models.TimeSpaceAggregation) {

    <div class="container mx-auto px-4 py-8">
        <div class="text-center mb-8">
            <h1 class="text-4xl font-bold text-white mb-2 tracking-tight">{firstName}'s Travel Analytics</h1>
            <p class="text-slate-400">Explore your journey across the world</p>
        </div>
        <div id="map" class="w-full h-[600px] rounded-xl shadow-glass border border-white/10 mt-8 overflow-hidden backdrop-blur-sm"></div>
    </div>

    <div class="relative w-full">
        <!-- Overlay -->
        <div class="relative z-10 max-w-6xl mx-auto px-4 py-8">
            <!-- Header -->
            <div class="text-center mb-8">
                <h2 class="text-3xl font-bold text-white mb-2">Travel Statistics</h2>
                <p class="text-slate-400">Your adventures by the numbers</p>
            </div>

            <!-- Summary Cards -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                <div class="bg-ink-800/80 backdrop-blur-xl border border-white/10 rounded-xl p-6 shadow-glass hover:shadow-glass-hover transition-all duration-300 group">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-lg font-semibold text-white">Total Distance</h3>
                        <div class="w-10 h-10 rounded-full bg-mint-500/20 flex items-center justify-center group-hover:bg-mint-500/30 transition-colors">
                            <span class="text-mint-400 text-xl">✈️</span>
                        </div>
                    </div>
                    <div class="text-3xl font-bold text-mint-400 mb-1 font-mono">
                        {strconv.Itoa(tsAggregation.TotalKm)}
                    </div>
                    <div class="text-slate-400 text-sm">Kilometers traveled</div>
                </div>
                
                <div class="bg-ink-800/80 backdrop-blur-xl border border-white/10 rounded-xl p-6 shadow-glass hover:shadow-glass-hover transition-all duration-300 group">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-lg font-semibold text-white">Flight Time</h3>
                        <div class="w-10 h-10 rounded-full bg-grape-500/20 flex items-center justify-center group-hover:bg-grape-500/30 transition-colors">
                            <span class="text-grape-400 text-xl">⏱️</span>
                        </div>
                    </div>
                    <div class="text-3xl font-bold text-grape-400 mb-1 font-mono">
                        {strconv.FormatFloat(float64(tsAggregation.TotalHours), 'f', -1, 32)}
                    </div>
                    <div class="text-slate-400 text-sm">Hours in the air</div>
                </div>
            </div>

            <!-- Toggle: Month/Year -->
            <div class="flex justify-center mb-6">
                <div class="flex bg-ink-800 border border-white/10 rounded-full p-1">
                    <button hx-get="/api/statistics?agg=m" hx-target="#aggregation" hx-trigger="load, click" class="px-6 py-2 rounded-full text-slate-300 hover:text-white font-semibold transition-all duration-300 hover:bg-mint-500/20 focus:outline-none">Month</button>
                    <button hx-get="/api/statistics?agg=y" hx-target="#aggregation" class="px-6 py-2 rounded-full text-slate-300 hover:text-white font-semibold transition-all duration-300 hover:bg-mint-500/20 focus:outline-none">Year</button>
                </div>
            </div>

            <!-- Aggregation -->
            <div id="aggregation" class="bg-ink-800/60 backdrop-blur-xl border border-white/10 rounded-xl shadow-glass p-6">
                <!-- This will be populated by HTMX /statistics, calling AggregationComponent -->
            </div>
        </div>
    </div>
}


templ AggregationComponent(flights []models.FlightAggregation, airlines []models.AirlineAggregation, countries []models.CountryAggregation) {
    <div class="space-y-8">
        <div id="flights-per-agg" class="bg-white/5 rounded-xl p-6 border border-white/5">
            @FlightsPerAggregation(flights)
        </div>

        <div id="airlines-per-agg" class="bg-white/5 rounded-xl p-6 border border-white/5">
            @AirlinesPerAggregation(airlines)
        </div>

        <div id="countries-per-agg" class="bg-white/5 rounded-xl p-6 border border-white/5">
            @CountriesPerAggregation(countries)
        </div>
    </div>
}

func getBarHeightClass(count int, total int) string {
    if count <= 0 || total <= 0 {
        return "bg-ink-700 w-full h-1 rounded-full"
    }

    percent := float64(count) / float64(total)
    switch {
        case percent >= 0.9:
            return "bg-gradient-to-r from-mint-600 to-mint-400 w-full h-6 rounded-full shadow-mint-glow"
        case percent >= 0.75:
            return "bg-gradient-to-r from-mint-600 to-mint-500 w-full h-5 rounded-full"
        case percent >= 0.5:
            return "bg-gradient-to-r from-mint-600 to-mint-500 w-full h-4 rounded-full"
        case percent >= 0.25:
            return "bg-gradient-to-r from-mint-500 to-mint-400 w-full h-3 rounded-full"
        default:
            return "bg-mint-600/60 w-full h-2 rounded-full"
    }
}


templ FlightsPerAggregation(flights []models.FlightAggregation) {
    <div class="mb-4">
        <h3 class="text-lg font-semibold text-white mb-4 flex items-center gap-2">
            <span class="w-2 h-2 rounded-full bg-mint-400"></span>
            FLIGHTS OVER TIME
        </h3>
    </div>
    <div class="flex items-end gap-2 h-48 w-full bg-ink-700/30 rounded-lg p-4">
        for _, flight := range flights {
            <div class="flex-1 flex flex-col items-center">
                <div class="text-xs mb-2 text-mint-400 font-mono font-semibold">{strconv.Itoa(flight.Count)}</div>
                <!-- TODO: Total should be single not per flight-->
                <div class={getBarHeightClass(flight.Count, flight.Total)} title={strconv.Itoa(flight.Count)}></div>
                <div class="text-xs mt-2 text-slate-400 font-mono">'{flight.Label}</div>
            </div>
        }
    </div>
}

func getBarWidth(count int, numAirlines int) string { // or get the actual max flight count to normalize
    return "width: " + strconv.Itoa(int(float64(count) / float64(numAirlines) * 100)) + "%;" // This function normalizes the count to a percentage of the max count
}


templ AirlinesPerAggregation(airlines []models.AirlineAggregation) {
    {{ 
        // Compute the maximum count to scale bar widths
        maxCount := 0
        for _, c := range airlines {
        if c.Count > maxCount {
            maxCount = c.Count
        }
        }
        var rowHeight = 40
        var chartWidth = 600
        var barMaxWidth = 360  // Maximum width for the largest bar
        var chartHeight = len(airlines) * rowHeight + 20
    }}
    <div class="mb-4">
        <h3 class="text-lg font-semibold text-white mb-4 flex items-center gap-2">
            <span class="w-2 h-2 rounded-full bg-grape-400"></span>
            AIRLINES
        </h3>
    </div>

    <div class="bg-ink-700/30 rounded-lg p-4">
        <svg class="w-full h-auto" viewBox={"0 0 " + strconv.Itoa(chartWidth) + " " + strconv.Itoa(chartHeight)} preserveAspectRatio="xMinYMin meet">
            for i, airline := range airlines {
                {{  
                    y := i * rowHeight + 10
                    // Compute bar width proportional to maxCount
                    barWidth := 0
                    if maxCount > 0 {
                      barWidth = int(float64(airline.Count) / float64(maxCount) * float64(barMaxWidth))
                    }
                    // Positions for text and rectangle
                    countX := 140 + barWidth + 12
                    textY := y + 18
                    rectY := y + 6
                }}
                <g>
                    <!-- Airline name -->
                    <text x="0" y={strconv.Itoa(textY)} class="text-sm fill-slate-300 font-medium">{airline.Label}</text>
                    <!-- Bar rectangle -->
                    <rect x="140" y={strconv.Itoa(rectY)} width={strconv.Itoa(barWidth)} height="20" rx="10" class="fill-grape-400 opacity-80" />
                    <!-- Count label -->
                    <text x={strconv.Itoa(countX)} y={strconv.Itoa(textY)} class="text-sm fill-slate-400 font-mono">{strconv.Itoa(airline.Count)}</text>
                </g>
            }
        </svg>
    </div>
}


templ CountriesPerAggregation(countries []models.CountryAggregation) {
    {{ 
        // Compute the maximum count to scale bar widths
        maxCount := 0
        for _, c := range countries {
        if c.Count > maxCount {
            maxCount = c.Count
        }
        }
        var rowHeight = 40
        var chartWidth = 600
        var barMaxWidth = 360  // Maximum width for the largest bar
        var chartHeight = len(countries) * rowHeight + 20
    }}
    <div class="mb-4">
        <h3 class="text-lg font-semibold text-white mb-4 flex items-center gap-2">
            <span class="w-2 h-2 rounded-full bg-mint-400"></span>
            COUNTRIES AND REGIONS
        </h3>
    </div>

    <div class="bg-ink-700/30 rounded-lg p-4">
        <svg class="w-full h-auto" viewBox={"0 0 " + strconv.Itoa(chartWidth) + " " + strconv.Itoa(chartHeight)} preserveAspectRatio="xMinYMin meet">
            for i, country := range countries {
                {{  
                    y := i * rowHeight + 10
                    // Compute bar width proportional to maxCount
                    barWidth := 0
                    if maxCount > 0 {
                      barWidth = int(float64(country.Count) / float64(maxCount) * float64(barMaxWidth))
                    }
                    // Positions for text and rectangle
                    countX := 140 + barWidth + 12
                    textY := y + 18
                    rectY := y + 6
                }}
                <g>
                    <!-- Country name -->
                    <text x="0" y={strconv.Itoa(textY)} class="text-sm fill-slate-300 font-medium">{country.Label}</text>
                    <!-- Bar rectangle -->
                    <rect x="140" y={strconv.Itoa(rectY)} width={strconv.Itoa(barWidth)} height="20" rx="10" class="fill-mint-500 opacity-80" />
                    <!-- Count label -->
                    <text x={strconv.Itoa(countX)} y={strconv.Itoa(textY)} class="text-sm fill-slate-400 font-mono">{strconv.Itoa(country.Count)}</text>
                </g>
            }
        </svg>
    </div>
}
