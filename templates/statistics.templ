package templates

import (
    "github.com/skywall34/trip-tracker/internal/models"
    "strconv"
)

// By default aggregations will be by month
templ Statistics(firstName string) {

    <div class="container mx-auto">
        <h1 class="text-2xl font-bold text-center mt-5">{firstName}'s Trip Map</h1>
        <div id="map" class="w-full h-[600px] rounded-lg shadow-md mt-5"></div>
    </div>

    <div class="relative w-full h-screen">

        <!-- Overlay -->
        <div class="relativ z-10 p-4">
            <!-- Header -->
            <div class="flex items-center mb-4">
                <h1 class="text-3xl font-bold">Statistics</h1>    
            </div>

            <!-- Summary TODO: Create sql query for total miles and hours-->
            <div class="bg-white rounded-2xl shadow-lg p-4 mb-4">
                <h2 class="text-xl font-semibold mb-2">Statistics</h2>
                <div class="text-lg font-medium">
                    <span>Placeholder 295,232 miles</span>
                    <span class="ml-4">Placeholder 324 hours</span>
                </div>
            </div>

            <!-- Toggle: Month/Year -->
            <div class="flex justify-center mb-4">
                <button hx-get="/api/statistics?agg=m" hx-target="#aggregation" hx-trigger="load, click" class="w-1/2 bg-white text-gray-700 py-2 font-semibold transition hover:bg-gray-100 focus:outline-none">Month</button>
                <button hx-get="/api/statistics?agg=y" hx-target="#aggregation" class="w-1/2 bg-white text-gray-700 py-2 font-semibold transition hover:bg-gray-100 focus:outline-none">Year</button>
            </div>

            <!-- Aggregation -->
            <div id="aggregation" class="bg-white rounded-2xl shadow-lg p-4">
                <!-- This will be populated by HTMX /statistics, calling AggregationComponent -->
            </div>

        </div>
    </div>
}


templ AggregationComponent(flights []models.FlightAggregation, airlines []models.AirlineAggregation, countries []models.CountryAggregation) {
    <div id="flights-per-agg">
        @FlightsPerAggregation(flights)
    </div>

    <div id="airlines-per-agg" class="mt-6">
        @AirlinesPerAggregation(airlines)
    </div>

    <div id="countries-per-agg" class="mt-6">
        @CountriesPerAggregation(countries)
    </div>
}

func getBarHeightClass(count int, total int) string {
    if count <= 0 || total <= 0 {
        return "bg-gray-200 w-full h-1"
    }

    percent := float64(count) / float64(total)
    switch {
        case percent >= 0.9:
            return "bg-black w-full h-6"
        case percent >= 0.75:
            return "bg-black w-full h-3"
        case percent >= 0.5:
            return "bg-black w-full h-3"
        case percent >= 0.25:
            return "bg-black w-full h-1"
        default:
            return "bg-black w-full h-1"
    }
}


templ FlightsPerAggregation(flights []models.FlightAggregation) {
    <div class="flex items-end gap-2 h-40 w-full">
        for _, flight := range flights {
            <div class="flex-1 flex flex-col items-center">
                <div class="text-sm mb-1">{strconv.Itoa(flight.Count) }</div>
                <!-- TODO: Total should be single not per flight-->
                <div class={getBarHeightClass(flight.Count, flight.Total)}  title={strconv.Itoa(flight.Count)}></div>
                <div class="text-xs mt-1">'{flight.Label}</div>
            </div>
        }
    </div>
}

func getBarWidth(count int, numAirlines int) string { // or get the actual max flight count to normalize
    return "width: " + strconv.Itoa(int(float64(count) / float64(numAirlines) * 100)) + "%;" // This function normalizes the count to a percentage of the max count
}


templ AirlinesPerAggregation(airlines []models.AirlineAggregation) {
    <h3 class="text-md font-semibold mb-2">AIRLINES</h3>
    for _, airline := range airlines {
        <div class="flex justify-between mb-1">
            <span>{airline.Label}</span>
            <div class="flex-1 mx-2 bg-gray-200 rounded-full">
                <div class="h-2 rounded-full bg-gray-700" style={getBarWidth(airline.Count, len(airlines))}></div>
            </div>
            <span>{strconv.Itoa(airline.Count)}</span>
        </div>
    }
}


templ CountriesPerAggregation(countries []models.CountryAggregation) {
    <h3 class="text-md font-semibold mb-2">COUNTRIES AND REGIONS</h3>
    for _, country := range countries {
        <div class="flex justify-between mb-1">
            <span>{country.Country}</span>
            <div class="flex-1 mx-2 bg-gray-200 rounded-full">
                <div class="h-2 rounded-full bg-gray-700" style={getBarWidth(country.Count, len(countries))}></div>
            </div>
            <span>{strconv.Itoa(country.Count)}</span>
        </div>
    }
}